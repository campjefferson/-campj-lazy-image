{"version":3,"file":"index.js","sources":["../src/lazy-image.js"],"sourcesContent":["const DEFAULT_THRESHOLD_STEPS = 10;\nconst DEFAULT_THRESHOLD = Array.from({\n  length: DEFAULT_THRESHOLD_STEPS + 1\n}).map((_, idx) => parseFloat((idx / DEFAULT_THRESHOLD_STEPS).toFixed(2)));\n\n// class wraps each image element that has a data-src attribute\n// (this might be a bit presumptuous, should investigate and maybe apply a data-lazy attribute instead)\nclass LazyImage {\n  constructor(imageElement) {\n    // ref to the element\n    this.$img = imageElement;\n    // ref the <sources> nodes\n    this.$sources = Array.from(this.$img.parentNode.querySelectorAll(\"source\"));\n\n    this.init();\n  }\n  /**\n   *\n   *\n   * @memberof LazyImage\n   */\n  init() {\n    this.addIO();\n  }\n\n  /**\n   * adds the IntersectionObserver functionality for lazy-loading the image\n   * gets the rootMargin from the data-rootmargin attribute if present\n   * observes the image\n   * triggers the image load when the IntersectionObserver has an entry within the threshold\n   * @memberof LazyImage\n   */\n  addIO() {\n    this.userRootMargin = this.$img.parentNode.parentNode.dataset.rootmargin;\n    this.io = new IntersectionObserver(\n      entries => {\n        entries.forEach(entry => {\n          if (entry.intersectionRatio > 0) {\n            this.io.unobserve(this.$img);\n            this.loadImage();\n          }\n        });\n      },\n      {\n        rootMargin: this.userRootMargin || `400px 300px`,\n        root: null,\n        threshold: DEFAULT_THRESHOLD,\n        delay: 100,\n        trackVisibility: true\n      }\n    );\n    this.io.observe(this.$img);\n  }\n\n  /**\n   * triggers the image laod\n   * adds the load listener\n   * @memberof LazyImage\n   */\n  loadImage() {\n    this.$img.addEventListener(\"load\", () => {\n      this.onLoad();\n    });\n    this.$sources.forEach($source => {\n      $source.setAttribute(`srcset`, $source.dataset.srcset);\n      $source.removeAttribute(`data-srcset`);\n    });\n    this.$img.src = this.$img.dataset.src;\n  }\n\n  /**\n   * image load handler\n   * sets the opacity to 1 and the visibility to \"visible\" when the image is loaded\n   * this allows for the \"fadeUp\" effect\n   * @memberof LazyImage\n   */\n  onLoad() {\n    this.$img.style.visibility = `visible`;\n    this.$img.style.opacity = 1;\n  }\n}\n\n// wrap each image in the LazyImage class to handle lazy loading\nconst run = () => {\n  const allImages = Array.from(document.querySelectorAll(\"img[data-src]\"));\n  allImages.forEach(img => new LazyImage(img));\n};\n\nconst init = () => {\n  // wait for the initial page load to initialize LazyImage(s)\n  window.addEventListener(\"load\", run);\n};\n\nexport { init, run };\n"],"names":["const","DEFAULT_THRESHOLD","Array","from","length","DEFAULT_THRESHOLD_STEPS","map","_","idx","parseFloat","toFixed","LazyImage","constructor","imageElement","$img","$sources","this","parentNode","querySelectorAll","init","addIO","userRootMargin","dataset","rootmargin","io","IntersectionObserver","entries","forEach","entry","intersectionRatio","unobserve","loadImage","rootMargin","root","threshold","delay","trackVisibility","observe","addEventListener","onLoad","$source","setAttribute","srcset","removeAttribute","src","style","visibility","opacity","run","document","img","window"],"mappings":"AAAAA,IACMC,EAAoBC,MAAMC,KAAK,CACnCC,OAAQC,KACPC,aAAKC,EAAGC,UAAQC,YAAYD,EAHC,IAG8BE,QAAQ,MAIhEC,EACJC,SAAYC,QAELC,KAAOD,OAEPE,SAAWb,MAAMC,KAAKa,KAAKF,KAAKG,WAAWC,iBAAiB,gBAE5DC,oBAOPA,qBACOC,qBAUPA,iCACOC,eAAiBL,KAAKF,KAAKG,WAAWA,WAAWK,QAAQC,gBACzDC,GAAK,IAAIC,8BACZC,GACEA,EAAQC,iBAAQC,GACVA,EAAMC,kBAAoB,MACvBL,GAAGM,UAAUd,EAAKF,QAClBiB,gBAIX,CACEC,WAAYhB,KAAKK,gBAAmB,cACpCY,KAAM,KACNC,UAAWjC,EACXkC,MAAO,IACPC,iBAAiB,SAGhBZ,GAAGa,QAAQrB,KAAKF,mBAQvBiB,qCACOjB,KAAKwB,iBAAiB,oBACpBC,gBAEFxB,SAASY,iBAAQa,GACpBA,EAAQC,aAAc,SAASD,EAAQlB,QAAQoB,QAC/CF,EAAQG,gBAAiB,sBAEtB7B,KAAK8B,IAAM5B,KAAKF,KAAKQ,QAAQsB,iBASpCL,uBACOzB,KAAK+B,MAAMC,WAAc,eACzBhC,KAAK+B,MAAME,QAAU,GAK9B/C,IAAMgD,aACc9C,MAAMC,KAAK8C,SAAS/B,iBAAiB,kBAC7CS,iBAAQuB,UAAO,IAAIvC,EAAUuC,yCAKvCC,OAAOb,iBAAiB,OAAQU"}