var t=Array.from({length:11}).map(function(t,i){return parseFloat((i/10).toFixed(2))}),i=function(t){this.$img=t,this.$sources=Array.from(this.$img.parentNode.querySelectorAll("source")),this.init()};i.prototype.init=function(){this.addIO()},i.prototype.addIO=function(){var i=this;this.userRootMargin=this.$img.parentNode.parentNode.dataset.rootmargin,this.io=new IntersectionObserver(function(t){t.forEach(function(t){t.intersectionRatio>0&&(i.io.unobserve(i.$img),i.loadImage())})},{rootMargin:this.userRootMargin||"400px 300px",root:null,threshold:t,delay:100,trackVisibility:!0}),this.io.observe(this.$img)},i.prototype.loadImage=function(){var t=this;this.$img.addEventListener("load",function(){t.onLoad()}),this.$sources.forEach(function(t){t.setAttribute("srcset",t.dataset.srcset),t.removeAttribute("data-srcset")}),this.$img.src=this.$img.dataset.src},i.prototype.onLoad=function(){this.$img.style.visibility="visible",this.$img.style.opacity=1};var o=function(){Array.from(document.querySelectorAll("img[data-src]")).forEach(function(t){return new i(t)})},e={init:function(){window.addEventListener("load",o)},run:o};export{e as LazyImage};
//# sourceMappingURL=index.mjs.map
